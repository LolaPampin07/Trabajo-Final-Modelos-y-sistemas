clc
clear
close all

%% Parámetros del sistema
a = 0.2; b = 0.2; c = 5.7;

% Condiciones iniciales
xi_0 = [0 0 0];
xi_1 = [1 1 1];
xi_2 = [-1 -1 -1];

% Ventana temporal
t_span = linspace(0, 200, 5000);

% Sistema de Rössler

rossler = @(t,x) [-x(2) - x(3);
           x(1) + a*x(2);
           b + x(3)*(x(1) - c)];

% Resolución
[t, x] = ode45(rossler, t_span, xi_0);
[~, y] = ode45(rossler, t_span, xi_1);
[~, z] = ode45(rossler, t_span, xi_2);

%% Gráfico
figure;
plot3(x(:,1), x(:,2), x(:,3), 'r'); hold on;
plot3(y(:,1), y(:,2), y(:,3), 'g');
plot3(z(:,1), z(:,2), z(:,3), 'b');
xlabel('x'); ylabel('y'); zlabel('z');
title('Diagrama de Fase del Sistema de Rössler');
grid on;

%% Puntos de equilibrio

F = @(x) [-x(2) - x(3);
           x(1) + a*x(2);
           b + x(3)*(x(1) - c)];

opts = optimoptions('fsolve','Display','none');
xeq1 = fsolve(F, xi_0, opts);
xeq2 = fsolve(F, xi_1, opts);

disp('Puntos de equilibrio:')
disp(xeq1)
disp(xeq2)
%% Matriz Jacobiana

syms x y z

f1 = -y - z;
f2 = x + a*y;
f3 = b + z*(x - c);

Fv = [f1; f2; f3];

% Jacobiano simbólico
J = jacobian(Fv, [x y z]);
disp('Matriz Jacobiana simbólica:')
disp(J)
%% Linearizacion del sistema
J_eval1 = subs(J, [x, y, z], xeq1);

% Convertir a numérico
J_eval1_num = double(J_eval1);

disp('Jacobiana en el punto de equilibrio x1:')
for i = 1:size(J_eval1_num,1)
    fprintf('[');
    fprintf(' %.2f', J_eval1_num(i,:)); % 2 decimales
    fprintf(' ]\n');
end
  
 %% 4. Autovalores
lambda1 = eig(J_eval1);
fprintf('Autovalores x1:\n');
for i = 1:length(lambda1)
    fprintf(' %.2f + %.2fi\n', real(lambda1(i)), imag(lambda1(i)));
end

%% Diagrama de fase


%% Grafico de trayectorias


%% Funcion transferencia
